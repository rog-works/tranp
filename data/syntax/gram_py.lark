// entry
entry := (expr "\n")+

// expression
expr[1] := comp_or

// operation - comparison
comp_or[1] := comp_and (op_or comp_and)*
comp_and[1] := comp_not (op_and comp_not)*
comp_not[1] := (op_not)? comp
comp[1] := calc_sum (op_comp calc_sum)*

// operation - arithmetical
calc_sum[1] := calc_mul (op_add calc_mul)*
calc_mul[1] := calc_unary (op_mul calc_unary)*
calc_unary[1] := (op_unary)? primary

// operation - operator
op_or := "or"
op_and := "and"
op_comp := op_comp_s | (op_not)? op_in | op_is (op_not)?
op_comp_s := /<|>|==|<=|>=|!=/
op_in := "in"
op_is := "is"
op_not := "not"
op_add := /[-+]/
op_mul := /[*\/%]/
op_unary := /[-+]/

// atom
primary[1] := relay | invoke | indexer | atom
relay := primary "." name
invoke := primary "(" [args] ")"
indexer := primary "[" slice "]"
atom[1] := boolean | none | var | string | digit | decimal
var := name

// element
args := expr ("," expr)*
slice[*] := expr (":" expr)*

// terminal
boolean := /False|True/
none := "None"
name := /[a-zA-Z_]\w*/
string := /'([^'\\]*(\\')?)*'|"([^"\\]*(\\")?)*"/
digit := /0|[1-9]\d*/
decimal := /(0|[1-9]\d*)[.]\d+/

// FIXME 以下のatom関連は一旦非対応
// atom[1] := ... | list | dict | group_exp
// list := "[" [list_exps] "]"
// dict := "{" [dict_exps] "}"
// group_exp := "(" expr ")"
// list_exps := expr ("," expr)*
// dict_exps := dict_pair ("," dict_pair)*
// dict_pair := expr ":" expr
