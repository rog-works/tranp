from typing import Any, Callable, TypeGuard, TypeVar
from enum import Enum

from rogw.tranp.node.node import Node

T = TypeVar('T', bound='Reflection')
T2 = TypeVar('T2')


class Accesses(Enum): ...


def is_a(inst: Any, t: type[T2]) -> TypeGuard[T2]: ...


class Query:
	@classmethod
	def any(cls) -> 'Query': ...

	@classmethod
	def index(cls, *indexs: int) -> 'Query': ...

	@classmethod
	def to_not(cls) -> 'Query': ...


class Finder:
	@classmethod
	def where(cls, data: Any, **kwargs: 'Query') -> dict[str, Any]: ...


class Reflection:
	def __init__(self, node: Node) -> None: ...

	def as_a(self, t: type[T]) -> T: ...

	def on(self, action: str, callback: Callable[..., Any]) -> None: ...

	def unpack(self, query: type[T]) -> T: ...


class Fragment(Reflection):
	@property
	def declare(self) -> 'Fragment': ...


class Object(Fragment):
	def types(self) -> 'Object': ...
	def name(self) -> str: ...
	def access(self) -> Accesses: ...
	def props(self, key: str) -> 'Object': ...


class Class(Object):
	@property
	def class_vars(self) -> list[Object]: ...

	@property
	def this_vars(self) -> list[Object]: ...

	@property
	def statements(self) -> list[Fragment]: ...


class Function(Class): ...
class Method(Function): ...

class Variant: ...
class Null(Variant): ...

class Alias(Variant): ...
class Body(Alias): ...
class This(Alias): ...

class CVar:
	@property
	def on(self) -> 'CVar': ...
