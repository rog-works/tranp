// entry
entry := (exp "\n")+

// expression
?exp := primary

// atom
?primary := relay | invoke | indexer | atom
relay := primary "." name
invoke := primary "(" [args] ")"
indexer := primary "[" exp "]"
?atom := var | bool | none | str | int | float
var := name

// element
args := exp ("," exp)*

// terminal
bool := /False|True/
int := /[1-9]\d*/
float := /(0|[1-9]\d*)[.]\d+/
str := /'[^']*'|"[^"]*"/
none := "None"
name := /[a-zA-Z_]\w*/

// FIXME 演算は一旦非対応
// exp := or_test
// or_test := and_test ("or" and_test)*
// and_test := not_test ("and" not_test_)*
// not_test := "not" not_test | comparison
// comparison := sum (comp_op sum)*
// sum := term (add_op term)*
// term := factor (mul_op factor)*
// factor := unary_op factor | primary
// comp_op := "<" | ">" | "==" | "<=" | ">=" | "!=" | "in" | "not" "in" | "is" | "is" "not"
// add_op := "+" | "-"
// mul_op := "*" | "/" | "%"
// unary_op := "+" | "-"
// FIXME list | dict | group_exp は一旦非対応
// list := "[" [list_exps] "]"
// dict := "{" [dict_exps] "}"
// group_exp := "(" exp ")"
// list_exps := exp ("," exp)*
// dict_exps := dict_pair ("," dict_pair)*
// dict_pair := exp ":" exp
