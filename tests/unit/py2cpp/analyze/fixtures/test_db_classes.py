from typing import Any, Generic, Iterator, Sequence

from py2cpp.compatible.python.embed import __actual__
from py2cpp.compatible.python.template import T_Seq

# Type

class Union: ...
class Unknown: ...

# Primitive

@__actual__('int')
class Integer:
	def __init__(self, value: int | float) -> None: ...

@__actual__('float')
class Float:
	def __init__(self, value: int | float) -> None: ...

@__actual__('str')
class String: ...
@__actual__('bool')
class Boolean: ...
@__actual__('tuple')
class Tuple: ...
class Pair: ...
@__actual__('list')
class List(Generic[T_Seq]):
	def __init__(self, iterable: Iterator[T_Seq]) -> None: ...
	def __iter__(self) -> Iterator[T_Seq]: ...
	def append(self, elem: T_Seq) -> None: ...
	def pop(self, index: int = -1) -> T_Seq: ...

@__actual__('dict')
class Dict: ...
@__actual__('None')
class Null: ...

# Class

@__actual__('object')
class Object:
	def __init__(self) -> None: ...

@__actual__('type')
class Type: ...
@__actual__('super')
class Super: ...
class Exception:
	def __init__(self, *args: Any) -> None: ...

# Function

def id(instance: Any) -> int: ...
def print(*args: Any) -> None: ...
def enumerate(iterable: Sequence[Any]) -> Iterator[tuple[int, Any]]: ...  # XXX (Sequence[T]) -> Iterator[tuple[int, T]]
def range(size: int) -> Iterator[int]: ...
def len(iterable: Sequence[Any]) -> int: ...
