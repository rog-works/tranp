file_input: (_NEWLINE | statement)*

// # General statements

// @lark statement: compound_stmt | simple_stmt
?statement: compound_stmt | simple_stmt

?simple_stmt: small_stmt _NEWLINE
?small_stmt: expression
	| assign_stmt
	| return_stmt
	| import_stmt
	| raise_stmt
	| pass_stmt
	| del_stmt
	| yield_stmt
	| break_stmt
	| continue_stmt
	| comment_stmt // @custom

?compound_stmt: function_def
	| if_stmt
	| class_def
	| with_stmt
	| for_stmt
	| try_stmt
	| while_stmt

// # Import statements

// @decl `from module.path.to import symbol1, symbol2, ...`
// @lark import_from: "from" (dots? dotted_name | dots) "import" ("*" | "(" import_as_names ")" | import_as_names)
import_stmt: "from" dotted_name "import" ("(" import_as_names ")" | import_as_names)
dotted_name: name ("." name)*
import_as_name: name ["as" name]
import_as_names: import_as_name ("," import_as_name)* [","]

// # Common elements

block: _NEWLINE _INDENT statement+ _DEDENT | simple_stmt

// @decl `@decorator.path.to`
// @decl `@decorator.path.to(symbol1, symbol2, ...)`
// @lark decorated: decorators (classdef | funcdef | async_funcdef)
decorators: decorator+
decorator: "@" dotted_name ["(" [arguments] ")"] _NEWLINE

// # Class definitions

// @decl `class class_name:`
// @decl `class class_name(parent1, parent2, ...):`
// @lark classdef: "class" name ["(" [arguments] ")"] ":" block
class_def: [decorators] class_def_raw
class_def_raw: "class" name ["(" [inherit_arguments] ")"] ":" block

// @custom
inherit_arguments: (typed_argvalue | metaclass_argvalue) ("," (typed_argvalue | metaclass_argvalue))*
metaclass_argvalue: "metaclass" "=" typed_expression

// # Function definitions

// @decl `def func_name(param1: type1, param2: type2, ...) -> return_type:`
// @lark funcdef: "def" name "(" [parameters] ")" ["->" test] ":" suite
function_def: [decorators] function_def_raw
function_def_raw: "def" name "(" [parameters] ")" "->" return_type ":" block
// @custom
?return_type: typed_expression | "'" typed_expression "'"

// ## Function parameters

// @decl `(param1: type1, ...)`
// @decl `(param1: type1 = def1, ...)`
// @decl `(param1: type1.path.to, ...)`
// @decl `(param1: type1[subtype1, subtype2, ...], ...)`
// @decl `(param1: 'type1.path.to', ...)`
// @lark parameters: ("," paramvalue)* ["," SLASH ("," paramvalue)*] ["," [starparams | kwparams]] | starparams | kwparams
// @lark ?paramvalue: typedparam ("=" test)?
// @lark ?typedparam: name (":" test)?
parameters: paramvalue ("," paramvalue)* ["," starparam] ["," kwparams]
	| starparam ["," kwparams]
	| kwparams
?paramvalue: typedparam ["=" expression]
?typedparam: name [":" (typed_expression | "'" typed_expression "'")]
starparam: "*" typedparam
kwparams: "**" typedparam

// @custom
typed_argvalue: typed_expression

// @custom
?typed_expression: typed_or_expr
?typed_or_expr: typed_primary ("|" typed_primary)*
?typed_primary: typed_primary "." name -> typed_getattr
	| typed_primary "[" typed_slices "]" -> typed_getitem
	| typed_atom

// @custom
typed_slices: typed_slice | typed_slice (("," typed_slice)+ [","] | ",")
?typed_slice: typed_expression

// @custom
?typed_atom: name -> typed_var
	| "None" -> typed_none
	| "[" _typed_exprlist? "]" -> typed_list

// @custom
_typed_exprlist: typed_expression ("," typed_expression)* [","]

// # Function call argumanets

// @decl `(arg1, arg2, ...)`
// @lark arguments: argvalue ("," argvalue)* ("," [ starargs | kwargs])? | starargs | kwargs | comprehension{test}
// @lark argvalue: test ("=" test)?
// @lark starargs: stararg ("," stararg)* ("," argvalue)* ["," kwargs]
// @lark stararg: "*" test
// @lark kwargs: "**" test ("," argvalue)*
arguments: argvalue ("," argvalue)* ["," starargs] ["," kwargs] | starargs ["," kwargs] | kwargs
argvalue: expression | name "=" expression
starargs: "*" expression
kwargs: "**" expression

// # If/While/For statement

// @lark while_stmt: "while" test ":" suite ["else" block]
// @lark for_stmt: "for" exprlist "in" testlist ":" suite ["else" block]
if_stmt: if_clause elif_clauses [else_clause]
if_clause: "if" expression ":" block
elif_clauses: elif_clause*
elif_clause: "elif" expression ":" block
else_clause: "else" ":" block
while_stmt: "while" expression ":" block
for_stmt: "for" for_namelist for_in ":" block
// @custom
for_in: "in" expression

// Try/Except statement

// @lark try_stmt: "try" ":" suite except_clauses ["else" block] [finally] | "try" ":" suite finally
// @lark except_clause: "except" [test ["as" name]] ":" suite
try_stmt: try_clause except_clauses
try_clause: "try" ":" block
except_clauses: except_clause+
// @note XXX typed_expressionの箇所は本来は式だが、クラス以外を指定する事はまずないので簡易化しておく
except_clause: "except" typed_expression ["as" name] ":" block

with_stmt: "with" with_items ":" block
with_items: with_item ("," with_item)*
with_item: expression ["as" name]

// Match statement
// @note switchの代替。3.10から導入。使わないので不要

// # Simple Statements

// @lark assign_stmt: assign | annassign | augassign
// @lark assign: testlist_star_expr ("=" (yield_expr|testlist_star_expr))+
// @lark annassign: testlist_star_expr ":" test ["=" test]
// @lark augassign: testlist_star_expr augassign_op (yield_expr|testlist)
// @note XXX Pythonの仕様では本来assign以外は分割代入できない(=左辺にtupleを書けない)
// @note XXX しかし、Larkの構文解析の仕様上、マッチ条件が短いほど優先度が高くなり
// @note XXX assign_stmtのor条件が成り立たなくなるため、優先度を合わせるためにassign_namelistを共通で利用する
?assign_stmt: assign | anno_assign | aug_assign | class_assign | template_assign
assign: assign_namelist ("=" expression)+
anno_assign: assign_namelist ":" (typed_expression | "'" typed_expression "'") ["=" expression]
aug_assign: assign_namelist aug_assign_op expression
// @custom
class_assign: assign_namelist ":" "TypeAlias" "=" typed_expression
template_assign: assign_namelist "=" "TypeVar" "(" string ["," "bound" "=" (typed_expression | "'" typed_expression "'")] ["," "covariant" "=" atom] ")"

!aug_assign_op: "+=" | "-=" | "*=" | "@=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" | "**=" | "//="

// @lark del_stmt: "del" exprlist
// @lark return_stmt: "return" [testlist]
// @lark yield_stmt: "yield" [testlist] | "yield" "from" test -> yield_from
// @lark raise_stmt: raise [test ["from" test]]
del_stmt: "del" _exprlist
return_stmt: "return" [expression]
yield_stmt: "yield" expression
raise_stmt: "raise" primary ["from" name]
break_stmt: "break"
pass_stmt: "pass"
continue_stmt: "continue"
// @custom
comment_stmt: COMMENT

// # Expressions

// @note Lark: test, Offical: expression
// @lark ?test: or_test ("if" or_test "else" test)? | lambdef | assign_expr
?expression: or_test | or_test "if" or_test "else" expression -> tenary_test

// ## Comparison operators

// @lark ?or_test: and_test ("or" and_test)*
// @lark ?and_test: not_test_ ("and" not_test_)*
// @lark ?not_test_: "not" not_test_ -> not_test | comparison
?or_test: and_test (_or_op and_test)*
?and_test: not_test_ (_and_op not_test_)*
?not_test_: _not_op not_test_ -> not_test | comparison
?comparison: expr (comp_op expr)*
?expr: or_expr

!comp_op: "<" | ">" | "==" | ">=" | "<=" | "<>" | "!="
	| "in" -> comp_in
	| "not" "in" -> comp_not_in
	| "is"  -> comp_is
	| "is" "not" -> comp_is_not
// @custom
!_or_op: "or"
!_and_op: "and"
!_not_op: "not"

// ## Bitwise operators

// @lark: ?or_expr: xor_expr ("|" xor_expr)*
// @lark: ?xor_expr: and_expr ("^" and_expr)*
// @lark: ?and_expr: shift_expr ("&" shift_expr)*
?or_expr: xor_expr (_or_bit_op xor_expr)*
?xor_expr: and_expr (_xor_bit_op and_expr)*
?and_expr: shift_expr (_and_bit_op shift_expr)*
?shift_expr: sum (_shift_op sum)*

// @custom
!_or_bit_op: "|"
!_xor_bit_op: "^"
!_and_bit_op: "&"

// ## Arithmetic operators

// @note Lark: arith_expr, Official: sum
// @lark ?factor: _unary_op factor | power
?sum: term (_add_op term)*
?term: factor (_mul_op factor)*
?factor: _unary_op factor | primary

// @lark !_mul_op: "*" | "/" | "%" | "//"
!_unary_op: "+" | "-" | "~"
!_add_op: "+" | "-"
!_shift_op: "<<" | ">>"
!_mul_op: "*" | "/" | "%"

// # Primary elements

// @note Lark: atom_expr, Offical: primary
?primary: primary "." name -> getattr
	| primary "(" [arguments] ")" -> funccall
	| primary "[" slices "]" -> getitem
	| atom

// @lark slice: test
slices: slice
	| slice (("," slice)+ [","] | ",")
	| [slice] ":" [slice] [":" slice] -> slice
?slice: expression

?atom: name -> var
	| "True" -> const_true
	| "False" -> const_false
	| "None" -> const_none
	| string
	| number
	| "(" _tuple_inner? ")" -> tuple
	| "[" _exprlist? "]" -> list
	| "[" comprehension{expression} "]"  -> list_comp
	| "{" _dict_exprlist? "}" -> dict
	| "{" comprehension{key_value} "}" -> dict_comp
	| group_expr
	| "..." -> elipsis

group_expr: "(" expression ")"

// @lark ?testlist_star_expr: test_or_star_expr | test_or_star_expr ("," test_or_star_expr)+ ","?  -> tuple | test_or_star_expr ","  -> tuple
// @note FIXME 本質的には"*"は末尾にだけ付与され得るので不正確。また、解析後に"*"が判定できなくなるため、型推論も正しくならない
assign_namelist: expression | expression (("," ["*"]? expression)+ [","] | ",")
// @lark ?exprlist: (expr|star_expr) | (expr|star_expr) (("," (expr|star_expr))+ [","] | ",")
for_namelist: name | name (("," name)+ [","] | ",")

// @lark _tuple_inner: test_or_star_expr (("," test_or_star_expr)+ [","] | ",")
_tuple_inner: expression (("," expression)+ [","] | ",")

// @lark _exprlist: test_or_star_expr (","  test_or_star_expr)* [","]
_exprlist: (expression | star_expr) ("," (expression | star_expr))* [","]
star_expr: "*" expression

_dict_exprlist: (key_value | "**" expression) ("," (key_value | "**" expression))* [","]
key_value: expression ":" expression

// # Comprehensions & Generators

// @lark comp_for: [ASYNC] "for" exprlist "in" or_test
// @lark ?comp_if: "if" test_nocond
comprehension{comp_result}: comp_result comp_fors [comp_if]
comp_fors: comp_for+
comp_for: "for" for_namelist comp_for_in
?comp_if: "if" or_test

// @custom
comp_for_in: "in" or_test

// Python terminals

%import python (name, string, number, NAME, STRING, LONG_STRING, DEC_NUMBER, FLOAT_NUMBER, HEX_NUMBER, COMMENT)

// Other terminals

_NEWLINE: ( /\r?\n[\t ]*/ )+

%ignore /[\t \f]+/ // White Spaces
%ignore /\\[\t \f]*\r?\n/ // Empty Lines
%declare _INDENT _DEDENT // @note Need for `parse(..., postlex=PythonIndender)`
